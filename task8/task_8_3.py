# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.

# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь
# сам не остановит работу скрипта, введя, например, команду “stop”. При этом скрипт завершается,
# сформированный список выводится на экран.

# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить
# соответствующее сообщение. При этом работа скрипта не должна завершаться.

class MyException(Exception):
    def __init__(self):
        self.txt = "Необходимо ввести только цифры или слово: stop"


class MyList:
    def __init__(self):
        self.__intList = []

    def myset(self, el):
        try:
            int(el)
            self.__intList.append(el)
        except ValueError:
            raise MyException()

    def __str__(self):
        return " ".join(self.__intList)


MineList = MyList()

while True:
    inp_data = input("Введите число, чтобы добавить его в список или слово stop ")
    if inp_data == "stop":
        break
    try:
        MineList.myset(inp_data)
    except MyException as err:
        print(err.txt)

print(MineList)
